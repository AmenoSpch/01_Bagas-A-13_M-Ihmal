#define _USE_MATH_DEFINES 
#include <cmath>        
#include <cstdlib>
#include <iostream>
#include <fstream>

#include <GL/glew.h>
#include <GL/freeglut.h> 

#include "getBMP.h"
// Bagas Adhitya-5222600001
// Muhammad Ihmal-5222600013
// 10GTA

static unsigned int texture[2];
double rotation_x = 0;
double rotation_y = 0;
double rotate_All = 0;
int lastMouseX, lastMouseY;
bool isDragging = false;

void updateAnimation(int value)
{
    rotation_x += 1.0;
    rotation_y += 1.0;

    glutPostRedisplay();
    glutTimerFunc(16, updateAnimation, 0);
}

void loadTextures()
{
    imageFile* image[2];
    image[0] = getBMP("../../Textures/spidol4.bmp");
    image[1] = getBMP("../../Textures/tutup2.bmp");

    glBindTexture(GL_TEXTURE_2D, texture[0]);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image[0]->width, image[0]->height, 0,
        GL_RGBA, GL_UNSIGNED_BYTE, image[0]->data);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

    glBindTexture(GL_TEXTURE_2D, texture[1]);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image[1]->width, image[1]->height, 0,
        GL_RGBA, GL_UNSIGNED_BYTE, image[1]->data);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

}

void setupLighting() {
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);

    GLfloat light_position[] = { 0.0, 2.0, 0.0, 1.0 };  
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);

    GLfloat ambient[] = { 0.1, 0.1, 0.1, 1.0 };
    GLfloat diffuse[] = { 1.0, 1.0, 1.0, 1.0 };
    GLfloat specular[] = { 1.0, 1.0, 1.0, 1.0 };

    glLightfv(GL_LIGHT0, GL_AMBIENT, ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse);
    glLightfv(GL_LIGHT0, GL_SPECULAR, specular);
}

void draw3D(void)
{
    glEnable(GL_DEPTH_TEST);
    setupLighting();

    glClearColor(1, 0, 0, 0);
    glShadeModel(GL_SMOOTH);
    glViewport(10, 100, 1000, 1000);
    glLoadIdentity();
    gluPerspective(90.0, (GLfloat)640 / (GLfloat)480, 1.0, 1000.0);

    glGenTextures(3, texture);
    loadTextures();

    glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
    glEnable(GL_TEXTURE_2D);
}

void bola()
{
    glEnable(GL_COLOR_MATERIAL);
    glColor3f(0, 1, 0);
    glDisable(GL_TEXTURE_2D);
    glTranslatef(0.0, 0.0, -5.0); 
    glutSolidSphere(10, 20, 20);
    glFlush();
}

void cylinder(float rbase, float rtop, float height)
{
    const int segments = 20;

    for (float i = 0; i < height; i += height / segments)
    {
        glBegin(GL_QUAD_STRIP);
        for (int j = 0; j <= segments; ++j)
        {
            float angle = 2.0 * M_PI * static_cast<float>(j) / static_cast<float>(segments);
            float x = rbase * cos(angle);
            float y = rbase * sin(angle);

            glTexCoord2f(j / static_cast<float>(segments), i / height);
            glVertex3f(x, y, i);

            glTexCoord2f(j / static_cast<float>(segments), (i + height / segments) / height);
            glVertex3f(x, y, i + height / segments);
        }
        glEnd();
    }
}

void spidol()
{
    glEnable(GL_COLOR_MATERIAL);

    //badan utama
    glBindTexture(GL_TEXTURE_2D, texture[0]);
    glPushMatrix();
    glEnable(GL_TEXTURE_2D);
    glColor3f(1.0, 1.0, 1.0);
    glTranslatef(0.0, 0.0, 0.0);
    cylinder(3.0, 3.0, 65.0);
    glPopMatrix();

    //tutup 1
    glBindTexture(GL_TEXTURE_2D, texture[1]);
    glPushMatrix();
    glEnable(GL_TEXTURE_2D);
    glColor3f(0.5, 0.5, 0.5);
    glTranslatef(0.0, 0.0, 64.0);
    cylinder(2.5, 2.0, 6.0);
    glPopMatrix();

    //tutup 2
    glBindTexture(GL_TEXTURE_2D, texture[1]);
    glPushMatrix();
    glEnable(GL_TEXTURE_2D);
    glColor3f(0.0, 0.0, 1.0);
    glTranslatef(0.0, 0.0, -1.0);
    cylinder(2.0, 8.0, 75.0);
    glPopMatrix();

    //ujung pena
    glBindTexture(GL_TEXTURE_2D, texture[1]);
    glPushMatrix();
    glEnable(GL_TEXTURE_2D);
    glColor3f(0.5, 0.5, 0.5);
    glTranslatef(0.0, 0.0, 75.0);
    glutSolidSphere(2, 20, 20);
    glPopMatrix();

    //ujung badan
    glBindTexture(GL_TEXTURE_2D, texture[0]);
    glPushMatrix();
    glEnable(GL_TEXTURE_2D);
    glColor3f(1.0, 1.0, 1.0);
    glTranslatef(0.0, 0.0, 1.5);
    glutSolidSphere(3.0, 20, 20);
    glPopMatrix();

    glDisable(GL_COLOR_MATERIAL);
    glDisable(GL_TEXTURE_2D);
}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(0.0, 0.0, 25.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

    glTranslatef(0, -30.0, -30);

    glRotatef(-90, 1.0, 0.0, 0.0);
    glRotatef(rotation_y, 0.0, 0.0, 1.0);


    spidol();

    bola();

    glFlush();
    glutSwapBuffers();
}

void resize(int w, int h)
{
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glFrustum(-5.0, 5.0, -5.0, 5.0, 5.0, 100.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void mouse(int button, int state, int x, int y)
{
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        lastMouseX = x;
        lastMouseY = y;
        isDragging = true;
    }
    else if (button == GLUT_LEFT_BUTTON && state == GLUT_UP)
    {
        isDragging = false;
    }
}

void mouseMotion(int x, int y)
{
    if (isDragging)
    {
        int deltaX = x - lastMouseX;
        int deltaY = y - lastMouseY;
        rotation_x += deltaY * 0.5;
        rotation_y += deltaX * 0.5;
        lastMouseX = x;
        lastMouseY = y;
        glutPostRedisplay();
    }
}

void printInteraction(void)
{
    std::cout << "Interaction:" << std::endl;
    std::cout << "Press x, X, y, Y, z, Z to turn the torus." << std::endl;
}

int main(int argc, char** argv)
{
    printInteraction();
    glutInit(&argc, argv);

    glutInitContextVersion(4, 3);
    glutInitContextProfile(GLUT_COMPATIBILITY_PROFILE);

    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("ini spidol.cpp");
    glutDisplayFunc(display);
    glutReshapeFunc(resize);
    glutMouseFunc(mouse);
    glutMotionFunc(mouseMotion);

    glewExperimental = GL_TRUE;
    glewInit();

    draw3D();
    setupLighting();

    glutTimerFunc(0, updateAnimation, 0);

    glutMainLoop();
}
